# -*- coding: utf-8 -*-
"""Lab_2 - Arrays and Lists

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1STYs-uScxGRc7T1cAyE3uWI__Jb9kkNL
"""

# Problem 1

array1 = [1,5,8,9,7,4,3,6]


def srch(array,element):
  
  for i in range(len(array)):
    
     if element == array[i]:
        print("Yes")
        return i+1
  return -1

srch(array1,6)

# Problem 2

array = [1,4,2,3]
def insatind(a,p,e):
  k = [None]*(len(a)+1)
  for i in range(p-1):
    k[i]=a[i]
  for i in range(p,len(a)+1):
    k[i]=a[i-1]
  k[p-1]=e 
  return k


insatind(array,4,5)

# Problem 3

array = [1,8,9,7,4]

def delatind(a,p):
  k = [None]*(len(a)-1)
  for i in range(p-1):
    k[i]=a[i]
  for i in range(p,len(a)):
    k[i-1]=a[i]
  
  return k


delatind(array,2)

#Problem 4

array = [1,6,4,7,9]

def insatend(a,e):
  p = len(a)
  k = [None]*(len(a)+1)
  for i in range(p):
    k[i]=a[i]
  for i in range(p,len(a)+1):
    k[i]=a[i-1]
  k[p]=e 
  return k

insatend(array,55)

#Problem 5

array = [1,6,4,7,9]

def insatbeg(a,e):
  p = len(a)
  k = [None]*(len(a)+1)
  for i in range(p-1):
    k[i]=a[i]
  for i in range(0,len(a)+1):
    k[i]=a[i-1]
  k[0]=e 
  return k



insatbeg(array,55)

# Creating Linked_List

class ListNode():
    def __init__(self, data) :
        self.data = data
        self.next = None

class linklist():
  def __init__(self):
    self.head = None
lnklist = linklist()
a = ListNode(11)
lnklist.head = a
b = ListNode(52)
c = ListNode(18)
d = ListNode(26)
a.next = b
b.next = c
c.next = d
lnklist.tail = d

tmp=a
while tmp != None:
    print (tmp.data, end=" ")
    tmp = tmp.next

# Problem 6


def Isrch(linked_list,e):
  head = linked_list.head
  l=1
  boolean = False
  while head!=None:
    if head.data == e:
      return l
      boolean = True
      break
    l = l+1
    head = head.next
  
  if (boolean == False):
    return -1
  head = lnklist.head
  while head != None:
    print(head.data, end= " ")
    head = head.next
Isrch(lnklist,52)

#Problem 7

def linsatend(linked_list, element):
  new = ListNode(element)
  tail = lnklist.tail
  tail.next = new


linsatend(lnklist,19)
head = lnklist.head

while head != None:
    print(head.data, end =" ")
    head = head.next

#Problem 8 (a)

def linsatbeg(linked_list , e):
  new = ListNode(e)
  new.next = lnklist.head
  lnklist.head = new
  

linsatbeg(lnklist,8)
head = lnklist.head

while head!=None:
  print(head.data, end =" ")
  head = head.next

# Problem 8 (b)

def delatend(linked_list):
  tail = lnklist.tail
  head = lnklist.head
  while head!=tail:
    print(head.data,end=" ")
    head = head.next

delatend(lnklist)

#Problem 9

array1 = [1,4,6,8,9]
def replatind(a, p , e):
  k = [None]*(len(a)-1)
  for i in range(p-1):
    k[i]=a[i]
  for i in range(p,len(a)):
    k[i-1]=a[i]
  if a[p-1] == e:
    return k
  else:
    return -1

  

replatind(array1,4,8)

#Problem 10

def replaatind(linked_list, p , e):
  new = ListNode(e)

  head1 = linked_list.head
  l=0
  n = 0
  m=0
  
  while l!=p-1:
    l = l+1
  
  while l!=n:
    head1 = head1.next
    if head1 == None:
      return -1
      break
    n = n+1
  head1.data = new.data
  
  
if (replaatind(lnklist,2,3)!=-1):
  tmp = lnklist.head
  while tmp!=None:
    print(tmp.data,end=" ")
    tmp = tmp.next
else:
  print(-1)

# Creating doubly Linked_list

class DListNode:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None


class dlinklist():
  def __init__(self):
    self.head = None
dlnklist = dlinklist()
a = DListNode(1)
dlnklist.head = a
b = DListNode(6)
c = DListNode(22)
d = DListNode(3)
dlnklist.tail = d

a.next = b
b.prev = a

b.next = c
c.prev = b

c.next = d
d.prev = c

head = a 
tail = d

#Problem 11


def dubbly_append(dlinked_list,e):
  new = DListNode(e)

  head = dlnklist.head
  tail = dlnklist.tail
  
  tail.next = new
  new.prev = tail
  while head!=None:
    print(head.data,end=" ")
    head = head.next
   

dubbly_append(dlnklist,14)

#Problem 12

def dubbly_remove(dlinked_list,e):

  tail = dlinked_list.tail
  head1 = dlinked_list.head
  l=0
  n = 0
  p=1
  while head1.data!=e:
    p = p+1
    head1 = head1.next

  head1 = dlinked_list.head

  while l!=p-1:
    l = l+1
  
  while l!=n+1:
    head1 = head1.next
    n = n+1
  head1.next = head1.next.next

dubbly_remove(dlnklist,3)

head = dlnklist.head

while head!=None:
   print(head.data,end = " ")
   head = head.next