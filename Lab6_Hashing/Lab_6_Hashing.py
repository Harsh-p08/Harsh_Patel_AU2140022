# -*- coding: utf-8 -*-
"""Lab 6_Hashing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RXPX1GQeHnYW6QaLD8nRNReetAvhCVNJ

Name:  Harsh Dineshkumar Patel




Roll No.: AU2140022



DSA Section_1
"""

# Problem 1

def Hashing(H,IN):
  m = len(H)
  for j in range(len(IN)):
    i=0
    slot = (IN[j] + i) % m
    while(H[slot] != None):
      i+=1
      slot = (IN[j] + i) % m
    H[slot] = IN[j]
  return H

def searching(H,el):
  m = len(H)
  for j in range(len(H)):
    i=0
    slot = (el + i) % m
    while(H[slot] != None and i!=m):
      if(H[slot]==el):
        return slot
      i+=1
    return -1

Input_1 = [133, 88, 92, 221, 174]
HashTable1 = [None]*17
HashTable2 = [None]*37
Se = [100, 133, 174]
print("HASTABLE-1 with length 17")
print(Hashing(HashTable1,Input_1))
for el in Se:
  if(searching(HashTable1,el)>=0):
    print("The element",el,"is in HashTable at index:",searching(HashTable1,el))
  else:
    print("The element",el,"is in not in the HashTable.")


print("\nHASTABLE-2 with length 37")
print(Hashing(HashTable2,Input_1))
for el in Se:
  if(searching(HashTable2,el)>=0):
    print("The element",el,"is in HashTable at index:",searching(HashTable2,el))
  else:
    print("The element",el,"is in not in the HashTable.")

# (b)

print("\nPart-b")
In1 = [6,18,5,12,15,16]
In2 = [3,2,9,6,11,13,7,12]
hashtable= [None]*6
print(Hashing(hashtable,In1))
hashtable1= [None]*8
print(Hashing(hashtable1,In2))

# Problem 2

def QP_Hashing(H,IN):
  m = len(H)
  for j in range(len(IN)):
    i=0
    slot = (IN[j] + i**2) % m
    while(H[slot] != None and i!=m):
      i+=1
      slot = (IN[j] + i**2) % m
    H[slot] = IN[j]
  return H

def QP_searching(H,el):
  m = len(H)
  for j in range(len(H)):
    i=0
    slot = (el + i**2) % m
    while(H[slot] != None and i!=m):
      if(H[slot]==el):
        return slot
      i+=1
      slot = (el + i**2) % m
    return -1

Input_1 = [133, 88, 92, 221, 174]
HashTable_1 = [None]*17
HashTable_2 = [None]*37
Se = [100, 133, 174]
print("HASHTABLE-1 Length 17")
print(QP_Hashing(HashTable_1,Input_1))
for el in Se:
  if(QP_searching(HashTable_1,el)>=0):
    print("The element",el,"is in HashTable at index:",QP_searching(HashTable_1,el))
  else:
    print("The element",el,"is in not in the HashTable.")

print(" ")

print("HASHTABLE-2 Length 37")
print(QP_Hashing(HashTable_2,Input_1))
for el in Se:
  if(QP_searching(HashTable_2,el)>=0):
    print("The element",el,"is in HashTable at index:",QP_searching(HashTable_2,el))
  else:
    print("The element",el,"is in not in the HashTable.")

#b)
print("\nPart-b")
In1 = [6,18,5,12,15,16]
hashtable= [None]*6
print(QP_Hashing(hashtable,In1))
QP_searching(hashtable,15)

# Problem 3

def Double_Hashing(H,IN,P):
  m = len(H)
  for j in range(len(IN)):
    i=0
    key = 1 + (IN[j] % P)
    slot = (IN[j] + i*key) % m
    while(H[slot] != None and i!=m):
      i+=1
      slot = (IN[j] + i*key) % m
    H[slot] = IN[j]
  return H

def Dsearching(H,el,P):
  m = len(H)

  for j in range(len(H)):
    i=0
    key = 1 + (H[j] % P)
    slot = (el + i*key) % m
    while(H[slot] != None and i!=m):
      if(H[slot]==el):
        return slot
      i+=1
      slot = (el + i*key) % m
    return -1

Input_1 = [133, 88, 92, 221, 174]
HashTable1 = [None]*17
Se = [100, 133, 174]
print("HASTABLE-1 length 17")
print(Double_Hashing(HashTable1,Input_1,11))
for el in Se:
  if(Dsearching(HashTable1,el,11)>=0):
    print("The element",el,"is in HashTable at index:",Dsearching(HashTable1,el,11))
  else:
    print("The element",el,"is in not in the HashTable.")

print("\nPart-b with colission")
In1 = [6,18,5,12,15,16]
hashtable= [None]*8
print(Double_Hashing(hashtable,In1,11))

# Problem 4

def Binary_Hashing(H1,H2,IN):
  m1 = len(H1)
  m2 = len(H2)
  for j in range(len(IN)):
    i1=i2=0

    slot1 = (IN[j] + i1) % m1
    while(H1[slot1] != 0):
      i1 += 1
      slot1 = (IN[j] + i1) % m1
    H1[slot1] = 1

    slot2 = (IN[j] + i2) % m2
    while(H2[slot2] != 0):
      i2 += 1
      slot2 = (IN[j] + i2) % m2
    H2[slot2] = 1
  return

def searching(H,el):
  m = len(H)
  for j in range(len(H)):
    i=0
    slot = (el + i) % m
    while(H[slot] != None and i!=m):
      if(H[slot]==1):
        return 1
      i+=1
    return -1

def BH_searching(H1,H2,el):
  f1 = searching(H1,el)
  f2 =  searching(H2,el)
  if (f1 or f2)==1:
    return 1
  else:
    return 0
  

Input_1 = [133, 88, 92, 221, 174]
HashTable1 = [0]*17
HashTable2 = [0]*37
Se = [100, 133, 174]
Binary_Hashing(HashTable1,HashTable2,Input_1)
print(HashTable1)
print(HashTable2)
print("\nSearching from both HASTABLE-1 and HASTABLE-2\n")
for el in Se:
  if(BH_searching(HashTable1,HashTable2,el)):
    print("The element",el,"is in the HashTables.")
  else:
    print("The element",el,"is in not in the HashTables.")

# Problem 5

def String_Hashing(H,IN):
  m = len(H)
  for j in range(len(IN)):
    i=0
    s=0
    for k in range(len(IN[j])):
      t = ord(IN[j][k])
      p = t*(3**(len(IN[j])-k-1))
      s += p
    print("polynomial value of",IN[j],"is:",s)
    slot = (s + i) % m
    while(H[slot] != None and i!=m):
      i+=1
      slot = (s + i) % m
    H[slot] = IN[j]
  print("")
  return H

def StH_searching(H,el):
  m = len(H)
  for j in range(len(H)):
    i=0
    s=0
    for k in range(len(el)):
      t = ord(el[k])
      p = t*(3**(len(el)-k-1))
      s += p
    slot = (s + i) % m
    while(H[slot] != None and i!=m):
      if(H[slot]==el):
        return slot
      i+=1
    return -1

Input_1 = ["fist", "sift", "shift", "fast", "faster", "shaft"]
HashTable1 = [None]*17
HashTable2 = [None]*37
Se = ["fist","fast"]
print("\nHASTABLE-1 length 17\n")
print(String_Hashing(HashTable1,Input_1))
print("")
for el in Se:
  if(StH_searching(HashTable1,el)>=0):
    print("The element \'",el,"\' is in HashTable at index:",StH_searching(HashTable1,el))
  else:
    print("The element \'",el,"\' is in not in the HashTable.")

print(" ")
print("HASTABLE-2 length 37")
print(" ")
print(String_Hashing(HashTable2,Input_1))
for el in Se:
  if(StH_searching(HashTable2,el)>=0):
    print("The element \'",el,"\' is in HashTable at index:",StH_searching(HashTable2,el))
  else:
    print("The element \'",el,"\' is in not in the HashTable.")

# Problem 7

import numpy as np

def Hshing(H,IN):
  m = len(H)
  for j in range(len(IN)):
    i=0
    slot = (IN[j]) % m
    while(H[slot][i] != None):
      i+=1
    H[slot][i] = IN[j]
  return H

def searching(H,el):
  m = len(H)
  for j in range(len(H)):
    i=0
    slot = (el) % m
    while(H[slot][i] != None):
      if(H[slot][i]==el):
        return slot
      i+=1
    return -1

Input_1 = [133, 88, 92, 221, 174]
HashTable1 = [[None]*4]*4
HashTable1 = np.array(HashTable1)

Se = [100, 133, 174]
print("HASTABLE-1 length 17")
print(Hshing(HashTable1,Input_1))
for el in Se:
  if(searching(HashTable1,el) >= 0):
    print("The element",el,"is in HashTable at row:",searching(HashTable1,el))
  else:
    print("The element",el,"is in not in the HashTable.")